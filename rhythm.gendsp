{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 8,
			"minor" : 0,
			"revision" : 3,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 42.0, 113.0, 826.0, 577.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 10.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 2,
		"gridsize" : [ 10.0, 10.0 ],
		"gridsnaponopen" : 2,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 0,
		"toptoolbarpinned" : 0,
		"righttoolbarpinned" : 0,
		"bottomtoolbarpinned" : 0,
		"toolbars_unpinned_last_save" : 0,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "To the Sun",
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-12",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 651.0, 540.0, 31.0, 20.0 ],
					"text" : "out 7"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-11",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 551.0, 540.0, 31.0, 20.0 ],
					"text" : "out 6"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-10",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 520.79998779296875, 540.0, 31.0, 20.0 ],
					"text" : "out 5"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-9",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 390.600006103515625, 540.0, 31.0, 20.0 ],
					"text" : "out 4"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-8",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 260.399993896484375, 540.0, 31.0, 20.0 ],
					"text" : "out 3"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-7",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 130.199996948242188, 540.0, 31.0, 20.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-6",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 651.0, 0.0, 25.0, 20.0 ],
					"text" : "in 4"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 434.0, 0.0, 25.0, 20.0 ],
					"text" : "in 3"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 0.0, 0.0, 25.0, 20.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 217.0, 0.0, 25.0, 20.0 ],
					"text" : "in 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 0.0, 540.0, 31.0, 20.0 ],
					"text" : "out 1"
				}

			}
, 			{
				"box" : 				{
					"code" : "Buffer intervals(\"intervals\");\r\nBuffer beats(\"beats\");\r\nBuffer recitation_intervals(\"recitation_intervals\");\r\nBuffer prior_timestamps(\"prior_timestamps\");\r\nBuffer rhythm(\"rhythm\");\r\nBuffer tempo(\"tempo\");\r\nBuffer salient(\"salient\");\r\nBuffer stats(\"stats\");\r\nBuffer recording(\"recording\");\r\nBuffer mode(\"mode\");\r\nBuffer stable(\"stable\");\r\nBuffer unstable(\"unstable\");\r\nBuffer steady(\"steady\");\r\nParam tolerance(9);\r\nParam wake(8000);\r\nParam backing(0);\r\natom = tolerance * 2;\r\nrange = 0;\r\ntimestamp = in1;\r\npitch = in2;\r\nvelocity = in3;\r\nchannel = in4;\r\nif(channel < 0) {\t\t\t\t\t\t//recitation takes slots 17-32\r\n\tchannel = abs(channel) + 16;\r\n}\r\nout1 = -1;\r\nout2 = -1;\r\nout3 = -1;\r\nout4 = -1;\r\nout5 = -1;\r\nout7 = -1;\r\nnow = stats.peek(0);\r\nlock = stats.peek(10);\t//.peek() alone in if() fails to compile. Must resolve to expression\r\naggregate = 0;\r\nif(pitch < 0) {\t//negative pitch signals a forced miss\r\n\trecording.poke(0, channel);\r\n\tout2 = 0;\r\n\tprior_beat = beats.peek(channel, 0);\r\n\tbeats.poke(prior_beat, channel, 1);\r\n\tbeats.poke(stats.peek(5), channel, 0);\r\n\tfor(i = 0; i < dim(recording); i += 1) {\r\n\t\tchannel_recording = recording.peek(i);\r\n\t\tstats.poke(channel_recording, 9);\t//recording\r\n\t\tout1 = channel_recording;\r\n\t\tif(channel_recording) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tout3 = lock;\r\n}\r\nelse {\r\n    interval = timestamp - prior_timestamps.peek(channel);\r\n    distinct = interval > atom;\r\n    if(distinct) {\r\n\t\tprior_beat = beats.peek(channel, 0);\r\n\t\tbeats.poke(prior_beat, channel, 1);\r\n\t\tbeats.poke(stats.peek(5), channel, 0);\r\n        intervals_prior = 0;\r\n        prior_interval = intervals.peek(0, channel);\r\n        while(prior_interval) {\t//counts intervals, aggregating and tolerating them\r\n            aggregate += prior_interval;\r\n            if(aggregate <= wake) {\r\n                center = now + aggregate;\r\n                for(sample = center - tolerance; sample <= center + tolerance; sample += 1) {\r\n                    wrapped = sample % dim(rhythm);\r\n                    incremented = rhythm.peek(wrapped) + 1;\r\n                    rhythm.poke(incremented, wrapped);\r\n                    if(incremented > range) {\r\n                        range = incremented;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                rhythm.poke(0, intervals_prior, channel);\r\n            }\r\n            intervals_prior += 1;\r\n            prior_interval = intervals.peek(intervals_prior, channel);\r\n        }\r\n        while(intervals_prior >= 0) { //counts back down, moving intervals 1 index up\r\n            intervals_prior -= 1;\r\n            prior_interval = intervals.peek(intervals_prior, channel);\r\n            intervals.poke(prior_interval, intervals_prior + 1, channel);\r\n        }\r\n        intervals.poke(interval, 0, channel);\r\n        prior_timestamps.poke(timestamp, channel);\r\n        if(channel < 16) {\t//exclude recitation (0-based)\r\n            if(!stats.peek(10)) {\t//if unlocked; not strictly necessary, but saves a lot of computation\r\n                //calculate tempo\r\n/*\r\n# with tempo updated by a separate gen~, its current highest point must be found. Its keys are traversed from low to high and the center\r\n# of the highest \"plateau\" in their values is found. This is the mode beat interval.\r\n*/\r\n                summit = 0;\r\n                width = 0;\r\n                edge = 0;\r\n                plateauing = 0;\r\n                backstep = 0;\r\n                for(i = 0; i < wake; i += 1) {\r\n                    eyelevel = tempo.peek(i);\r\n                    if(eyelevel > summit) {\r\n                        summit = eyelevel;\r\n                        width = 1;\r\n                        edge = i;\r\n                        plateauing = 1;\r\n                    }\r\n                    else if(eyelevel == summit && i - backstep == 1) {\r\n                        if(plateauing) {\r\n                            width += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        plateauing = 0;\r\n                    }\r\n                    backstep = i;\r\n                }\r\n                center = (width / 2) + edge;/*\r\n# next, the \"stability\" of the user's playing is assessed. The mode beat interval must remain the same, otherwise it\r\n# will be considered \"unstable\". The timestamp of the last unstable moment is stored by channel in unstable. If\r\n# instability is determined, the playing will also be considered \"unsteady\" (see below).*/\r\n                beat = center + tolerance;\r\n                if(abs(center - mode.peek(channel)) > tolerance) {\t//unstable because the mode beat changed too drastically\r\n                    unstable.poke(timestamp, channel);\r\n                    steady.poke(0, channel);\r\n                }\r\n                mode.poke(center, channel);\r\n                if(steady.peek(channel) < 3 && (timestamp - stable.peek(channel) > beat || interval > beat)) {\r\n                    unstable.poke(timestamp, channel);\t//unstable because it went for longer than a beat without maintaining\r\n                    steady.poke(0, channel);\t\t\t//stability (or there was no input for over a beat)\r\n                }\r\n            }\t\r\n/*\r\n# the essential calculation made by the script is determining the \"likelihood\" of a played note, essentially whether\r\n# it is a \"hit\" or \"miss\". Similarly to the way tempo was traversed in search of a high point, a smaller range in\r\n# rhythm is scanned. The differences are that only the necessary span on either side of the incoming timestamp is\r\n# searched and rather than determining what its high point is, the purpose is simply to determine whether or not a\r\n# peak exists there. A peak is considered found if the values first go up and then also go down within the range. If\r\n# so, the user's playing is considered both stable and steady. The number of successive \"hits\" is documented by steady.\r\n*/\r\n            likelihood = 0;\r\n\t\t\tout7 = rhythm.peek(timestamp % dim(rhythm));\r\n            home = timestamp - atom;\r\n            hindfoot = rhythm.peek(home % dim(rhythm));\r\n            width = 0;\r\n            edge = 0;\r\n            plateauing = 0;\r\n            for(i = home; i <= timestamp + atom; i += 1) {\r\n                forefoot = rhythm.peek(i % dim(rhythm));\r\n                salient.poke(forefoot, i - home);\r\n                if(forefoot > hindfoot) {\r\n                    width = 1;\r\n                    edge = i;\r\n                    plateauing = 1;\r\n                }\r\n                else if(plateauing) {\r\n                    if(forefoot == hindfoot) {\r\n                        width += 1;\r\n                    }\r\n                    else if(forefoot < hindfoot) {\r\n                        if(abs(timestamp - ((width / 2) + edge)) <= tolerance) {\r\n                            likelihood = 1;\r\n                            //break;\t//disabled to graph entire window\r\n                        }\r\n                        else {\r\n                            plateauing = 0;\r\n                        }\r\n                    }\r\n                }\r\n                hindfoot = forefoot;\r\n            }\r\n\t\t\tif(likelihood) {\r\n\t\t\t\tstable.poke(timestamp, channel);\t//could go before break if it wasn't disabled\r\n\t\t\t\tsteady.poke(steady.peek(channel) + 1, channel);\r\n\t\t\t}\r\n/*\r\n# if the user's playing stays \"steady\" for long enough, the mode beat interval locks in as the click track and the\r\n# song actually begins.\r\n*/\r\n            if(steady.peek(channel) > 3) {\t//3 is arbitrary: minimum number constituting a pattern\r\n                stats.poke(1, 10);\t//lock\r\n\t\t\t\tlock = 1;\r\n            }\r\n            if(lock) {\t//if locked\r\n            \tout2 = likelihood;\r\n                recording.poke(likelihood, channel);\r\n/*\r\nIf any channel currently has likelihood 1, overall recording is 1\r\n*/\r\n                for(i = 0; i < dim(recording); i += 1) {\r\n                    channel_recording = recording.peek(i);\r\n                    stats.poke(channel_recording, 9);\t//recording\r\n                    out1 = channel_recording;\r\n                    if(channel_recording) {\r\n                        break;\r\n                    }\r\n                }\r\n                click = stats.peek(6);\r\n                if(!click) {\r\n                    if(backing) {\r\n                        //comparison = backing;\r\n                        stats.poke(backing, 6);\r\n                        out5 = backing;\r\n                    }\r\n                    else {\r\n                        //comparison = mode.peek(channel);\r\n                        stats.poke(mode.peek(channel), 6);\r\n                        out5 = mode.peek(channel);\r\n                    }\r\n                }\r\n                out4 = 1;\t//tempo disabled currently\r\n            }\r\n\t\t\tout3 = lock;\r\n        }\r\n\t}\r\n}\r\nout6 = range;\r\n    /*\t\tvibes_prior = 0;\t//update to this unfinished; old gen~ version working\r\n            prior_vibe = vibes.peek(0);\r\n            while(prior_vibe) {\t//counts intervals, aggregating and tolerating them\r\n                if(prior_vibe <= wake) {\r\n                    for(sample = prior_vibe - tolerance; sample <= prior_vibe + tolerance; sample += 1) {\r\n                        wrapped = sample % dim(rhythm);\r\n                        incremented = rhythm.peek(wrapped) + 1;\r\n                        rhythm.poke(incremented, wrapped);\r\n                        if(incremented > range) {\r\n                            range = incremented;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    rhythm.poke(0, intervals_prior, channel);\r\n                }\r\n                intervals_prior += 1;\r\n                prior_interval = intervals.peek(intervals_prior, channel);\r\n            }\r\n            while(intervals_prior >= 0) { //counts back down, moving intervals 1 index up\r\n                intervals_prior -= 1;\r\n                prior_interval = intervals.peek(intervals_prior, channel);\r\n                intervals.poke(prior_interval, intervals_prior + 1, channel);\r\n            }\r\n            //below is the old gen~ code that was being updated\r\n            length = 0;\r\n            center = 0;\r\n            for(i = length - 1; i >= 0; i -= 1) {\r\n                memory.poke(memory.peek(i), i + 1);\r\n            }\r\n            memory.poke(interval, 0);\r\n            length += 1;\r\n            prior = frame;\r\n            for(i = 0; i < 1; i += 1) { //'< wake' changed to '< 1'. only using 1st index to find bpm not measure\r\n                if(!memory.peek(i)) {\r\n                    break;\r\n                }\r\n                aggregate += memory.peek(i);\r\n                if(aggregate <= wake) {\r\n                    hippocampus.poke(aggregate, i);\t\t\t\t\r\n                    vibe = i;\r\n                    for(j = aggregate - tolerance; j <= aggregate + tolerance; j += 1) {\r\n                        tempo.poke(tempo.peek(j) + 1, j);\r\n                    }\r\n                }\r\n                else {\r\n                    memory.poke(0, i);\r\n                    length -= 1;\r\n                }\r\n            }*/",
					"fontface" : 0,
					"fontname" : "Lucida Console",
					"fontsize" : 10.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 4,
					"numoutlets" : 7,
					"outlettype" : [ "", "", "", "", "", "", "" ],
					"patching_rect" : [ 0.0, 20.0, 670.0, 520.0 ]
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-10", 0 ],
					"source" : [ "obj-3", 4 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-11", 0 ],
					"source" : [ "obj-3", 5 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-12", 0 ],
					"source" : [ "obj-3", 6 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-7", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-8", 0 ],
					"source" : [ "obj-3", 2 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-9", 0 ],
					"source" : [ "obj-3", 3 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 2 ],
					"source" : [ "obj-5", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 3 ],
					"source" : [ "obj-6", 0 ]
				}

			}
 ],
		"bgfillcolor_type" : "gradient",
		"bgfillcolor_color1" : [ 0.376471, 0.384314, 0.4, 1.0 ],
		"bgfillcolor_color2" : [ 0.290196, 0.309804, 0.301961, 1.0 ],
		"bgfillcolor_color" : [ 0.290196, 0.309804, 0.301961, 1.0 ]
	}

}
